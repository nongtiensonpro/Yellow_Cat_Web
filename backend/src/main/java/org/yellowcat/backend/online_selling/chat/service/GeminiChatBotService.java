package org.yellowcat.backend.online_selling.chat.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.yellowcat.backend.online_selling.chat.dto.ProductVariantGemini;
import org.yellowcat.backend.online_selling.chat.repository.ProductVariantOnlineRepository;
import org.yellowcat.backend.product.productvariant.dto.ProductVariantFilterDTO;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiChatBotService {
    private final ProductVariantOnlineRepository productVariantOnlineRepository;

    @Value("${gemini.api.key}")
    private String apiKey;

    private final WebClient webClient = WebClient.builder().build();

    public String generateAnswer(String question) {
        List<ProductVariantGemini> products = productVariantOnlineRepository.findAllForGemini();

        // Debug log
        log.info("üì¶ Danh s√°ch s·∫£n ph·∫©m:");
        products.forEach(p -> log.info(p.toString()));

        String prompt = buildPrompt(question, products);
        log.info("üì© Prompt g·ª≠i ƒë·∫øn Gemini:\n{}", prompt);

        try {
            return callGemini(prompt).get();
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Gemini: {}", e.getMessage());
            return "L·ªói khi g·ªçi Gemini";
        }
    }

    private String buildPrompt(String question, List<ProductVariantGemini> products) {
        StringBuilder builder = new StringBuilder();
        builder.append("""
        B·∫°n l√† m·ªôt nh√¢n vi√™n b√°n h√†ng chuy√™n nghi·ªáp. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c theo danh s√°ch sau.
        Kh√¥ng b·ªãa th√¥ng tin n·∫øu s·∫£n ph·∫©m kh√¥ng c√≥.

        Danh s√°ch s·∫£n ph·∫©m:
        """);

        for (ProductVariantGemini p : products) {
            builder.append(String.format("""
        {
            "T√™n s·∫£n ph·∫©m": "%s",
            "H√£ng": "%s",
            "Lo·∫°i": "%s",
            "M√†u": "%s",
            "Size": "%s",
            "Gi√°": "%,.0f",
            "Khuy·∫øn m√£i": "%,.0f",
            "S·ªë l∆∞·ª£ng t·ªìn": %d,
            "Ch·∫•t li·ªáu": "%s",
            "ƒê·ªëi t∆∞·ª£ng": "%s"
        }
        """,
                    p.getProductName(),
                    p.getBrand(),
                    p.getCategory(),
                    p.getColor(),
                    p.getSize(),
                    p.getPrice(),
                    p.getSalePrice() != null ? p.getSalePrice() : p.getPrice(),
                    p.getQuantityInStock(),
                    p.getMaterial(),
                    p.getTargetAudience()
            ));
        }

        builder.append("\nC√¢u h·ªèi c·ªßa kh√°ch: ").append(question)
                .append("\nN·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m, h√£y xin l·ªói v√† ƒë·ªÅ xu·∫•t h·ªó tr·ª£.");

        return builder.toString();
    }

    private CompletableFuture<String> callGemini(String prompt) {
        return webClient.post()
                .uri("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
                .header("Content-Type", "application/json")
                .header("X-goog-api-key", apiKey)
                .bodyValue(Map.of("contents", List.of(
                        Map.of("parts", List.of(Map.of("text", prompt)))
                )))
                .retrieve()
                .bodyToMono(Map.class)
                .map(this::extractText)
                .onErrorReturn("Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p l·ªói khi g·ªçi Gemini.")
                .toFuture();
    }

    private String extractText(Map<?, ?> response) {
        try {
            var candidates = (List<?>) response.get("candidates");
            var content = (Map<?, ?>) ((Map<?, ?>) candidates.get(0)).get("content");
            var parts = (List<?>) content.get("parts");
            return (String) ((Map<?, ?>) parts.get(0)).get("text");
        } catch (Exception e) {
            return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n.";
        }
    }
}
