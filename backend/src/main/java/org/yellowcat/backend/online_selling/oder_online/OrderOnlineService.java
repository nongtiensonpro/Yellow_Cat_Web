package org.yellowcat.backend.online_selling.oder_online;


import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.yellowcat.backend.address.AddressRepository;
import org.yellowcat.backend.address.Addresses;
import org.yellowcat.backend.online_selling.PaymentStatus;
import org.yellowcat.backend.online_selling.cardItem_online.CartItemOnlineRepository;
import org.yellowcat.backend.online_selling.card_online.CartOnlineRepository;
import org.yellowcat.backend.online_selling.gmail_sending.EmailService;
import org.yellowcat.backend.online_selling.oder_online.dto.OrderOnlineDetailDTO;
import org.yellowcat.backend.online_selling.oder_online.dto.OrderOnlineRequestDTO;
import org.yellowcat.backend.online_selling.oder_online.dto.OrderSummaryDTO;
import org.yellowcat.backend.online_selling.oder_online.dto.ProductOnlineDTO;
import org.yellowcat.backend.online_selling.orderTimeline.OrderTimeline;
import org.yellowcat.backend.online_selling.orderTimeline.OrderTimelineRepository;
import org.yellowcat.backend.online_selling.orderTimeline.OrderTimelineService;
import org.yellowcat.backend.online_selling.order_item_online.OrderItemOnlineDTO;
import org.yellowcat.backend.online_selling.voucher.VoucherService1;
import org.yellowcat.backend.product.cartItem.CartItem;
import org.yellowcat.backend.product.order.Order;
import org.yellowcat.backend.product.orderItem.OrderItem;
import org.yellowcat.backend.product.orderItem.OrderItemRepository;
import org.yellowcat.backend.product.payment.Payment;
import org.yellowcat.backend.product.payment.PaymentRepository;
import org.yellowcat.backend.product.productvariant.ProductVariant;
import org.yellowcat.backend.product.productvariant.ProductVariantRepository;
import org.yellowcat.backend.product.shippingMethod.ShippingMethod;
import org.yellowcat.backend.product.shippingMethod.ShippingMethodRepository;
import org.yellowcat.backend.user.AppUser;
import org.yellowcat.backend.user.AppUserRepository;
import org.yellowcat.backend.online_selling.voucher.entity.VoucherRedemption;
import org.yellowcat.backend.online_selling.voucher.repository.VoucherRedemptionRepository;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderOnlineService {
    private final OderOnlineRepository orderRepository;
    private final OrderItemRepository orderItemRepository;
    private final ProductVariantRepository productVariantRepository;
    private final AddressRepository addressRepository;
    private final AppUserRepository appUserRepository;
    private final CartOnlineRepository cartRepository;
    private final CartItemOnlineRepository cartItemRepository;
    private final ShippingMethodRepository shippingMethodIdRepository;
    private final PaymentRepository paymentRepository;
    private final OrderTimelineRepository orderTimelineRepository;
    private final ShippingMethodRepository shippingMethodRepository;
    private final VoucherService1 voucherService1;
    private final VoucherRedemptionRepository voucherRedemptionRepository;
    private final EmailService emailService;

    @Autowired
    OrderTimelineService orderTimelineService;

    @Autowired
    OderOnlineRepository orderOnlineRepository;

    /**
     * T·∫°o ƒë∆°n h√†ng t·ª´ y√™u c·∫ßu ƒë·∫∑t h√†ng online
     * 
     * Ch·ª©c nƒÉng:
     * 1. X·ª≠ l√Ω danh s√°ch s·∫£n ph·∫©m v√† t√≠nh t·ªïng ti·ªÅn
     * 2. √Åp d·ª•ng voucher n·∫øu c√≥ (t√≠nh gi·∫£m gi√°)
     * 3. T√≠nh ph√≠ ship v√† t·ªïng ti·ªÅn cu·ªëi c√πng
     * 4. T·∫°o ƒë∆°n h√†ng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
     * 5. L∆∞u payment, timeline v√† x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
     * 
     * @param request DTO ch·ª©a th√¥ng tin ƒë∆°n h√†ng t·ª´ frontend
     * @return Order ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u v√†o database
     */
    @Transactional
    public Order createOrderFromOnlineRequest(OrderOnlineRequestDTO request) {
        List<OrderItem> orderItems = new ArrayList<>();
        BigDecimal subTotal = BigDecimal.ZERO;
        BigDecimal discountAfterAmount = BigDecimal.ZERO;

        // X·ª≠ l√Ω s·∫£n ph·∫©m
        for (ProductOnlineDTO p : request.getProducts()) {
            ProductVariant variant = productVariantRepository.findById(p.getId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + p.getId()));

            BigDecimal unitPrice = variant.getSalePrice() != null ? variant.getSalePrice() : variant.getPrice();
            BigDecimal totalPrice = unitPrice.multiply(BigDecimal.valueOf(p.getQuantity()));

            OrderItem item = OrderItem.builder()
                    .variant(variant)
                    .quantity(p.getQuantity())
                    .priceAtPurchase(unitPrice)
                    .totalPrice(totalPrice)
                    .build();

            orderItems.add(item);
            subTotal = subTotal.add(totalPrice);
        }

        BigDecimal shippingFee = request.getShippingFee() != null ? request.getShippingFee() : BigDecimal.ZERO;

        // Logic t√≠nh to√°n t·ªïng ti·ªÅn r√µ r√†ng
        BigDecimal finalAmount;
        BigDecimal subTotal_use_voucher;
        boolean hasVoucher = request.getCodeVoucher() != null && !request.getCodeVoucher().trim().isEmpty();

        if (hasVoucher) {
            // C√ì VOUCHER: T√≠nh theo logic voucher
            discountAfterAmount = voucherService1.calculateDiscountedAmount(
                    request.getCodeVoucher(), subTotal, shippingFee
            );
            subTotal_use_voucher = subTotal.subtract(discountAfterAmount);
            finalAmount = subTotal_use_voucher.add(shippingFee);
        } else {
            // KH√îNG C√ì VOUCHER: T·ªïng ti·ªÅn s·∫£n ph·∫©m + ph√≠ ship
            discountAfterAmount = BigDecimal.ZERO;
            subTotal_use_voucher = subTotal;
            finalAmount = subTotal.add(shippingFee);
        }

        // T√¨m ho·∫∑c t·∫°o AppUser
        AppUser user = null;
        if (request.getAppUser() != null && request.getAppUser().getKeycloakId() != null) {
            UUID keycloakId = request.getAppUser().getKeycloakId();
            String email = request.getAppUser().getEmail();

            System.out.println("üîç ƒêang t√¨m user b·∫±ng keycloakId: " + keycloakId);

            Optional<AppUser> optionalUser = appUserRepository.findByKeycloakId(keycloakId);

            if (optionalUser.isPresent()) {
                user = optionalUser.get();
                System.out.println("‚úÖ T√¨m th·∫•y user trong DB: "
                        + "appUserId=" + user.getAppUserId()
                        + ", username=" + user.getUsername()
                        + ", email=" + user.getEmail());
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi keycloakId: " + keycloakId);

                // Check theo email
                if (email != null && !email.isBlank()) {
                    Optional<AppUser> optionalUserByMail = appUserRepository.findByEmail(email);

                    if (optionalUserByMail.isPresent()) {
                        AppUser existingUser = optionalUserByMail.get();

                        if (existingUser.getRoles().contains("GUEST")) {
                            // üëâ N·∫øu user n√†y l√† GUEST th√¨ t√°i s·ª≠ d·ª•ng
                            user = existingUser;
                            System.out.println("‚ôªÔ∏è T√°i s·ª≠ d·ª•ng GUEST user v·ªõi email: " + email
                                    + ", appUserId=" + user.getAppUserId());
                        } else {
                            // üëâ N·∫øu user kh√¥ng ph·∫£i GUEST th√¨ b√°o l·ªói
                            throw new RuntimeException("Email " + email + " ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
                        }
                    }
                }

                // N·∫øu email ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o guest user m·ªõi
                if (user == null) {
                    System.out.println("üÜï T·∫°o m·ªõi GUEST user (v√¨ kh√¥ng t·ªìn t·∫°i keycloakId v√† email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω)");
                    user = new AppUser();
                    user.setFullName(request.getShippingAddress().getRecipientName());
                    user.setEmail(email);
                    user.setEnabled(true);
                    user.setRoles(List.of("GUEST"));

                    user = appUserRepository.save(user);
                    System.out.println("‚úÖ Guest user ƒë∆∞·ª£c t·∫°o v·ªõi appUserId: " + user.getAppUserId());
                }
            }
        }


        // X·ª≠ l√Ω ƒë·ªãa ch·ªâ giao h√†ng
        Addresses shippingAddress = request.getShippingAddress();
        if (shippingAddress.getAddressId() == null) {
            shippingAddress.setAppUser(user);
            shippingAddress = addressRepository.save(shippingAddress);
        } else {
            shippingAddress = addressRepository.findById(shippingAddress.getAddressId())
                    .orElseThrow(() -> new RuntimeException("ƒê·ªãa ch·ªâ kh√¥ng t·ªìn t·∫°i"));
        }

        ShippingMethod shippingOption = shippingMethodIdRepository.findById(request.getShippingMethodId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c giao h√†ng v·ªõi ID: " + request.getShippingMethodId()));

        // T·∫°o ƒë∆°n h√†ng

        Order order = Order.builder()
                .orderCode(generateOrderCode())
                .user(user)
                .shippingAddress(shippingAddress)
                .phoneNumber(request.getShippingAddress().getPhoneNumber())
                .customerName(request.getShippingAddress().getRecipientName())
                .subTotalAmount(subTotal)
                .shippingFee(shippingFee)
                .discountAmount(discountAfterAmount)
                .finalAmount(finalAmount)
                .customerNotes(request.getNote())
                .orderItems(orderItems)
                .orderDate(LocalDateTime.now())
                .orderStatus(request.getOrderStatus() != null && !request.getOrderStatus().isBlank()
                        ? request.getOrderStatus()
                        : "Pending")
                .isSyncedToGhtk(false)
                .shippingMethod(shippingOption)
                .createdAt(LocalDateTime.now())
                .build();

        // G√°n order v√†o t·ª´ng orderItem tr∆∞·ªõc khi l∆∞u
        orderItems.forEach(i -> i.setOrder(order));

        // L∆∞u order
        Order savedOrder = orderRepository.save(order);



        // g·∫Øn voucher cho ƒë∆°n h√†ng
        if(request.getCodeVoucher() != null) {
            voucherService1.applyVoucher(request.getCodeVoucher(), savedOrder, user != null ? user.getAppUserId() : null);
        }

        // T·∫°o timeline
        OrderTimeline timeline = new OrderTimeline();
        timeline.setNote(request.getNote());
        timeline.setFromStatus(request.getOrderStatus());
        timeline.setToStatus(request.getOrderStatus());
        timeline.setChangedAt(LocalDateTime.now());
        timeline.setOrderId(savedOrder.getOrderId());
        timeline.setUpdatedBy(user != null ? user.getAppUserId() : null);
        orderTimelineRepository.save(timeline);

        //L∆∞u ph∆∞∆°ng th·ª©c thanh to√°n
        Payment payment = new Payment();
        payment.setAmount(finalAmount);  // S·ª≠a: L∆∞u finalAmount thay v√¨ subTotal
        payment.setOrder(order);
        payment.setPaymentMethod(request.getPaymentMethod());
        payment.setPaymentStatus("Pending");

        Payment savedPayment = paymentRepository.save(payment);

        // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng n·∫øu user ƒëƒÉng nh·∫≠p
        if (user != null) {
            cartRepository.findByAppUser(user).ifPresent(cart -> {
                List<CartItem> itemsToRemove = cart.getCartItems().stream()
                        .filter(cartItem -> request.getProducts().stream()
                                .anyMatch(p -> p.getId().equals(cartItem.getVariant().getVariantId())))
                        .toList();

                cartItemRepository.deleteAll(itemsToRemove);
                cart.getCartItems().removeAll(itemsToRemove);
                cartRepository.save(cart);
            });
        }

        // G·ª≠i mail x√°c nh·∫≠n ƒë∆°n h√†ng
        emailService.sendNewOrderConfirmationEmail(savedOrder);

        return savedOrder;
    }

    /**
     * Sinh m√£ ƒë∆°n h√†ng t·ª± ƒë·ªông
     * 
     * Ch·ª©c nƒÉng:
     * - T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t theo format HDxxxxx
     * - HD = H√≥a ƒê∆°n, xxxxx = s·ªë ng·∫´u nhi√™n t·ª´ 10000-99999
     * 
     * @return String m√£ ƒë∆°n h√†ng (v√≠ d·ª•: HD12345)
     */
    private String generateOrderCode() {
        int randomNum = 10000 + new Random().nextInt(90000);
        return String.format("HD%d", randomNum);
    }

    /**
     * H·ªßy ƒë∆°n h√†ng v√† ho√†n kho
     * 
     * Ch·ª©c nƒÉng:
     * 1. Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
     * 2. Ki·ªÉm tra ƒë∆°n h√†ng c√≥ ·ªü tr·∫°ng th√°i 'Pending' kh√¥ng
     * 3. Ho√†n kho: c·ªông l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v√†o kho
     * 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh 'Cancelled'
     * 
     * @param orderId ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy
     * @return Order ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i
     * @throws RuntimeException n·∫øu ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ h·ªßy
     */
    @Transactional
    public Order cancelOrder(Integer orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        if (!order.getOrderStatus().equals("Pending")) {
            throw new RuntimeException("Ch·ªâ ƒë∆∞·ª£c hu·ª∑ ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'Pending'");
        }

        // Ho√†n kho
        for (OrderItem item : order.getOrderItems()) {
            ProductVariant variant = item.getVariant();
            variant.setQuantityInStock(variant.getQuantityInStock() + item.getQuantity());
            productVariantRepository.save(variant);
        }

        order.setOrderStatus("Cancelled");
        return orderRepository.save(order);
    }

    /**
     * T√¨m ƒë∆°n h√†ng theo m√£ ƒë∆°n h√†ng
     * 
     * Ch·ª©c nƒÉng:
     * - T√¨m ki·∫øm ƒë∆°n h√†ng trong database theo m√£ ƒë∆°n h√†ng (orderCode)
     * 
     * @param orderCode M√£ ƒë∆°n h√†ng c·∫ßn t√¨m (v√≠ d·ª•: HD12345)
     * @return Order n·∫øu t√¨m th·∫•y, null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    public Order getOrderByOrderCode(String orderCode) {
        Order order = orderRepository.findByOrderCode(orderCode);
        return order;
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng online c√≥ ƒë·ªãa ch·ªâ giao h√†ng
     * 
     * Ch·ª©c nƒÉng:
     * - L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c√≥ shipping address (ƒë∆°n h√†ng online)
     * - S·∫Øp x·∫øp theo th·ªùi gian c·∫≠p nh·∫≠t m·ªõi nh·∫•t
     * - Chuy·ªÉn ƒë·ªïi th√†nh DTO ƒë·ªÉ tr·∫£ v·ªÅ frontend
     * 
     * @return List<OrderSummaryDTO> danh s√°ch ƒë∆°n h√†ng online
     */
    @Transactional
    public List<OrderSummaryDTO> getAllOnlineOrdersWithShipping() {
        List<Order> orders = orderRepository.findByShippingAddressIsNotNullOrderByUpdatedAtDesc();

        return orders.stream().map(order -> OrderSummaryDTO.builder()
                .orderId(order.getOrderId())
                .orderCode(order.getOrderCode())
                .orderStatus(order.getOrderStatus())
                .customerName(order.getCustomerName())
                .finalAmount(order.getFinalAmount())
                .discountAmount(order.getDiscountAmount())
                .createdAt(order.getOrderDate())
                .updatedAt(order.getUpdatedAt())
                .build()
        ).toList();
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng online theo tr·∫°ng th√°i
     * 
     * Ch·ª©c nƒÉng:
     * - L·ªçc ƒë∆°n h√†ng online theo tr·∫°ng th√°i c·ª• th·ªÉ
     * - Ch·ªâ l·∫•y ƒë∆°n h√†ng c√≥ shipping address (ƒë∆°n h√†ng online)
     * - S·∫Øp x·∫øp theo th·ªùi gian c·∫≠p nh·∫≠t m·ªõi nh·∫•t
     * 
     * @param orderStatus Tr·∫°ng th√°i ƒë∆°n h√†ng c·∫ßn l·ªçc (v√≠ d·ª•: "Pending", "Completed")
     * @return List<OrderSummaryDTO> danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
     */
    @Transactional
    public List<OrderSummaryDTO> getOnlineOrdersByStatus(String orderStatus) {
        List<Order> orders = orderRepository.findByShippingAddressIsNotNullAndOrderStatusOrderByUpdatedAtDesc(orderStatus);

        return orders.stream().map(order -> OrderSummaryDTO.builder()
                .orderId(order.getOrderId())
                .orderCode(order.getOrderCode())
                .customerName(order.getCustomerName())
                .orderStatus(order.getOrderStatus())
                .finalAmount(order.getFinalAmount())
                .discountAmount(order.getDiscountAmount())
                .createdAt(order.getOrderDate())
                .updatedAt(order.getUpdatedAt())
                .build()
        ).toList();
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng theo nh√≥m tr·∫°ng th√°i
     * 
     * Ch·ª©c nƒÉng:
     * - Ph√¢n lo·∫°i ƒë∆°n h√†ng theo nh√≥m tr·∫°ng th√°i logic
     * - userRequestStatuses: ƒê∆°n h√†ng c·∫ßn x·ª≠ l√Ω t·ª´ ph√≠a kh√°ch h√†ng
     * - adminProcessingStatuses: ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c admin x·ª≠ l√Ω
     * - userTrackingStatuses: ƒê∆°n h√†ng kh√°ch h√†ng c√≥ th·ªÉ theo d√µi
     * - completedStatuses: ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh
     * 
     * @param groupKey T√™n nh√≥m tr·∫°ng th√°i c·∫ßn l·∫•y
     * @return List<OrderSummaryDTO> danh s√°ch ƒë∆°n h√†ng theo nh√≥m
     * @throws IllegalArgumentException n·∫øu groupKey kh√¥ng h·ª£p l·ªá
     */
    @Transactional
    public List<OrderSummaryDTO> getOrdersByStatusGroup(String groupKey) {
        List<String> statuses;

        switch (groupKey) {
            case "userRequestStatuses" -> statuses = List.of(
                    "Cancelled", "ReturnRequested", "NotReceivedReported", "Dispute", "CustomerReceived");
            case "adminProcessingStatuses" -> statuses = List.of(
                    "Pending", "Confirmed", "Processing", "Investigation",
                    "DeliveryFailed1", "DeliveryFailed2", "DeliveryFailed3", "IncidentReported", "LostOrDamaged",
                    "CustomerDecisionPending", "ReturnApproved", "ReturnRejected", "ReturnedToWarehouse",
                    "ReturnedToSeller", "Refunded", "FinalRejected");
            case "userTrackingStatuses" -> statuses = List.of(
                    "Confirmed", "Processing", "Shipping", "Delivered", "ReturningInProgress");
            case "completedStatuses" -> statuses = List.of(
                    "Completed", "Refunded", "FinalRejected", "ReturnedToSeller", "Cancelled");
            default -> throw new IllegalArgumentException("Nh√≥m tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + groupKey);
        }

        return orderRepository.findByOrderStatusIn(statuses)
                .stream()
                .map(this::convertToSummary)
                .toList();
    }


    /**
     * Chuy·ªÉn ƒë·ªïi Order entity th√†nh OrderSummaryDTO
     * 
     * Ch·ª©c nƒÉng:
     * - Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ Order entity sang DTO
     * - Ch·ªâ l·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt cho danh s√°ch ƒë∆°n h√†ng
     * - Gi·∫£m thi·ªÉu d·ªØ li·ªáu truy·ªÅn t·∫£i
     * 
     * @param order Order entity c·∫ßn chuy·ªÉn ƒë·ªïi
     * @return OrderSummaryDTO ch·ª©a th√¥ng tin t√≥m t·∫Øt ƒë∆°n h√†ng
     */
    private OrderSummaryDTO convertToSummary(Order order) {
        return OrderSummaryDTO.builder()
                .orderId(order.getOrderId())
                .orderCode(order.getOrderCode())
                .customerName(order.getCustomerName())
                .orderStatus(order.getOrderStatus())
                .finalAmount(order.getFinalAmount())
                .discountAmount(order.getDiscountAmount())
                .createdAt(order.getOrderDate())
                .updatedAt(order.getUpdatedAt())
                .build();
    }

    /**
     * L·∫•y chi ti·∫øt ƒë∆°n h√†ng online
     * 
     * Ch·ª©c nƒÉng:
     * 1. T√¨m ƒë∆°n h√†ng theo ID
     * 2. Chuy·ªÉn ƒë·ªïi OrderItems th√†nh DTO
     * 3. L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ giao h√†ng
     * 4. L·∫•y th√¥ng tin payment
     * 5. T·∫°o OrderOnlineDetailDTO v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
     * 
     * @param orderId ID c·ªßa ƒë∆°n h√†ng c·∫ßn l·∫•y chi ti·∫øt
     * @return OrderOnlineDetailDTO ch·ª©a th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng
     * @throws RuntimeException n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng
     */
    @Transactional
    public OrderOnlineDetailDTO getOrderDetail(Integer orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        List<OrderItemOnlineDTO> itemDTOs = order.getOrderItems().stream().map(item -> OrderItemOnlineDTO.builder()
                .productId(item.getVariant().getProduct().getProductId())
                .productName(item.getVariant().getProduct().getProductName())
                .variantName(item.getVariant().getProduct().getProductName()) // ho·∫∑c getVariantName() n·∫øu c√≥ s·∫µn
                .quantity(item.getQuantity())
                .unitPrice(item.getPriceAtPurchase())
                .totalPrice(item.getTotalPrice())
                .build()).toList();

        Addresses address = addressRepository.findByAddressId(order.getShippingAddress().getAddressId());
        Payment payment= paymentRepository.findByOrder(order);

        // L·∫•y th√¥ng tin voucher n·∫øu c√≥
        String voucherCode = null;
        if (order.getDiscountAmount() != null && order.getDiscountAmount().compareTo(BigDecimal.ZERO) > 0) {
                    // T√¨m voucher ƒë√£ √°p d·ª•ng cho ƒë∆°n h√†ng n√†y
        try {
            VoucherRedemption redemption = voucherRedemptionRepository.findByOrderId(order.getOrderId());
            if (redemption != null && redemption.getVoucher() != null) {
                voucherCode = redemption.getVoucher().getCode();
                System.out.println("‚úÖ T√¨m th·∫•y m√£ voucher: " + voucherCode);
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y voucher cho ƒë∆°n h√†ng: " + order.getOrderId());
            }
        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi l·∫•y m√£ voucher cho ƒë∆°n h√†ng: " + order.getOrderId() + " - " + e.getMessage());
        }
        }

        return OrderOnlineDetailDTO.builder()
                .orderId(order.getOrderId())
                .orderCode(order.getOrderCode())
                .orderStatus(order.getOrderStatus())
                .customerName(order.getCustomerName())
                .phoneNumber(order.getPhoneNumber())
                .wardCommune(address.getWardCommune())
                .streetAddress(address.getStreetAddress())
                .district(address.getDistrict())
                .cityProvince(address.getCityProvince())
                .country(address.getCountry())
                .orderDate(order.getOrderDate())
                .subTotal(order.getSubTotalAmount())
                .shippingFee(order.getShippingFee())
                .voucherDiscount(order.getDiscountAmount())
                .voucherCode(voucherCode)
                .finalAmount(order.getFinalAmount())
                .paymentStatus(payment.getPaymentStatus())
                .paymentMethod(payment.getPaymentMethod())
                .items(itemDTOs)
                .customerNotes(order.getCustomerNotes())
                .build();
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng online c·ªßa m·ªôt ng∆∞·ªùi d√πng
     * 
     * Ch·ª©c nƒÉng:
     * 1. T√¨m ng∆∞·ªùi d√πng theo keycloakId
     * 2. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng ƒë√≥
     * 3. L·ªçc ch·ªâ l·∫•y ƒë∆°n h√†ng online (c√≥ shipping address)
     * 4. S·∫Øp x·∫øp theo th·ªùi gian ƒë·∫∑t h√†ng m·ªõi nh·∫•t
     * 
     * @param keycloakId UUID c·ªßa ng∆∞·ªùi d√πng t·ª´ Keycloak
     * @return List<OrderSummaryDTO> danh s√°ch ƒë∆°n h√†ng online c·ªßa ng∆∞·ªùi d√πng
     * @throws RuntimeException n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
     */
    @Transactional
    public List<OrderSummaryDTO> getOrdersByUser(UUID keycloakId) {
        AppUser user = appUserRepository.findByKeycloakId(keycloakId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi keycloakId: " + keycloakId));

        List<Order> orders = orderRepository.findByUserOrderByOrderDateDesc(user);
        List<Order> ordersOnline = new ArrayList<>();
        for (Order order : orders) {
            if (order.getShippingAddress() != null && order.getShippingAddress().getAddressId() != null) {
                ordersOnline.add(order);
            }
        }

        return ordersOnline.stream().map(this::convertToSummary).toList();
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng online c·ªßa ng∆∞·ªùi d√πng theo tr·∫°ng th√°i
     * 
     * Ch·ª©c nƒÉng:
     * 1. T√¨m ng∆∞·ªùi d√πng theo keycloakId
     * 2. L·∫•y ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng theo tr·∫°ng th√°i c·ª• th·ªÉ
     * 3. L·ªçc ch·ªâ l·∫•y ƒë∆°n h√†ng online (c√≥ shipping address)
     * 4. Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
     * 
     * @param keycloakId UUID c·ªßa ng∆∞·ªùi d√πng t·ª´ Keycloak
     * @param orderStatus Tr·∫°ng th√°i ƒë∆°n h√†ng c·∫ßn l·ªçc
     * @return List<OrderSummaryDTO> danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i, r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
     */
    @Transactional
    public List<OrderSummaryDTO> getOrderStatus(UUID keycloakId, String orderStatus) {
        Optional<AppUser> userOpt = appUserRepository.findByKeycloakId(keycloakId);
        if (userOpt.isEmpty()) {
            return Collections.emptyList();
        }
        AppUser user = userOpt.get();
        List<Order> orders = orderRepository.findByUserAndOrderStatus(user, orderStatus);
        List<Order> ordersOnline = new ArrayList<>();
        for (Order order : orders) {
            if (order.getShippingAddress() != null && order.getShippingAddress().getAddressId() != null) {
                ordersOnline.add(order);
            }
        }
        return ordersOnline.stream().map(this::convertToSummary).toList();
    }
}
