package org.yellowcat.backend.product.promotion;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.yellowcat.backend.product.promotionproduct.PromotionProductRepository;
import org.yellowcat.backend.product.productvariant.ProductVariant;
import org.yellowcat.backend.product.productvariant.ProductVariantRepository;

import java.time.LocalDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class PromotionScheduler {

    private final PromotionRepository promotionRepository;
    private final PromotionProductRepository promotionProductRepository;
    private final ProductVariantRepository productVariantRepository;

    @Scheduled(cron = "0 0 0 * * *") // ch·∫°y m·ªói ng√†y l√∫c 00:00
    @Transactional
    public void updateExpiredPromotions() {
        LocalDateTime now = LocalDateTime.now();
        List<Promotion> expired = promotionRepository.findByEndDateBeforeAndIsActiveTrue(now);

        if (!expired.isEmpty()) {
            log.info("T√¨m th·∫•y {} promotion h·∫øt h·∫°n c·∫ßn x·ª≠ l√Ω", expired.size());
            
            // Set promotion th√†nh inactive
            expired.forEach(p -> p.setIsActive(false));
            promotionRepository.saveAll(expired);
            
            // üî• B·ªî SUNG: Reset salePrice v·ªÅ null cho t·∫•t c·∫£ variants thu·ªôc promotion h·∫øt h·∫°n
            int totalVariantsReset = 0;
            for (Promotion promotion : expired) {
                List<Integer> variantIds = promotionProductRepository.findVariantIdsByPromotionId(promotion.getId());
                if (!variantIds.isEmpty()) {
                    List<ProductVariant> variants = productVariantRepository.findAllById(variantIds);
                    
                    variants.forEach(variant -> {
                        log.debug("Reset salePrice cho variant ID: {} (SKU: {})", 
                                variant.getVariantId(), variant.getSku());
                        variant.setSalePrice(null);
                    });
                    
                    productVariantRepository.saveAll(variants);
                    totalVariantsReset += variants.size();
                    
                    log.info("ƒê√£ reset salePrice cho {} variants c·ªßa promotion: {} (ID: {})", 
                            variants.size(), promotion.getPromotionName(), promotion.getId());
                }
            }
            
            log.info("‚úÖ Ho√†n th√†nh: ƒê√£ c·∫≠p nh·∫≠t {} promotion h·∫øt h·∫°n th√†nh inactive v√† reset salePrice cho {} variants", 
                    expired.size(), totalVariantsReset);
        } else {
            log.debug("Kh√¥ng c√≥ promotion n√†o h·∫øt h·∫°n c·∫ßn x·ª≠ l√Ω");
        }
    }

    /**
     * Method test th·ªß c√¥ng ƒë·ªÉ admin c√≥ th·ªÉ ki·ªÉm tra logic reset promotion h·∫øt h·∫°n
     * C√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi th√¥ng qua API endpoint cho m·ª•c ƒë√≠ch testing
     */
    @Transactional
    public String manualCheckExpiredPromotions() {
        log.info("üîß MANUAL TEST: B·∫Øt ƒë·∫ßu ki·ªÉm tra promotion h·∫øt h·∫°n...");
        
        LocalDateTime now = LocalDateTime.now();
        List<Promotion> expired = promotionRepository.findByEndDateBeforeAndIsActiveTrue(now);
        
        if (expired.isEmpty()) {
            String message = "‚úÖ Kh√¥ng c√≥ promotion n√†o h·∫øt h·∫°n c·∫ßn x·ª≠ l√Ω";
            log.info(message);
            return message;
        }
        
        StringBuilder result = new StringBuilder();
        result.append(String.format("üìã T√¨m th·∫•y %d promotion h·∫øt h·∫°n:\n", expired.size()));
        
        int totalVariantsReset = 0;
        for (Promotion promotion : expired) {
            List<Integer> variantIds = promotionProductRepository.findVariantIdsByPromotionId(promotion.getId());
            result.append(String.format("- %s (ID: %d) - %d variants s·∫Ω ƒë∆∞·ª£c reset\n", 
                    promotion.getPromotionName(), promotion.getId(), variantIds.size()));
            totalVariantsReset += variantIds.size();
        }
        
        result.append(String.format("\nüìä T·ªïng c·ªông: %d variants s·∫Ω ƒë∆∞·ª£c reset salePrice", totalVariantsReset));
        result.append("\n‚ö†Ô∏è  ƒê·ªÉ th·ª±c thi, h√£y ch·∫°y updateExpiredPromotions()");
        
        String finalResult = result.toString();
        log.info("üîß MANUAL TEST K·∫æT QU·∫¢:\n{}", finalResult);
        return finalResult;
    }
}