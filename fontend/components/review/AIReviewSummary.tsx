import { useState, useEffect, useMemo } from 'react';
import { GoogleGenerativeAI } from '@google/generative-ai';

interface Review {
    id: string;
    rating: number;
    comment: string;
    customerName: string;
    createdAt?: string;
}

interface AIReviewSummaryProps {
    reviews: Review[];
}

const AIReviewSummary = ({ reviews }: AIReviewSummaryProps) => {
    const [aiSummary, setAiSummary] = useState<string>('');
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [error, setError] = useState<string>('');

    const apiKey = 'AIzaSyCW1jh4rRrAIDeji8I1pwSt_6JraiyY_CY';

    const generateSummary = async (reviewsData: Review[]) => {
        try {
            const genAI = new GoogleGenerativeAI(apiKey);
            const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

            const context = `B·∫°n l√† AI chuy√™n ph√¢n t√≠ch ƒë√°nh gi√° gi√†y th·ªÉ thao. T√≥m t·∫Øt ng·∫Øn g·ªçn c√°c ƒë√°nh gi√° sau, m·ª•c ƒë√≠ch ch√≠nh l√† cho bi·∫øt s·∫£n ph·∫©m n√†y ch·∫•t l∆∞·ª£ng ra sao:
            ${JSON.stringify(reviewsData, null, 2)}
            T·∫°o b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn (kho·∫£ng 100 t·ª´) bao g·ªìm:
            1. ƒêi·ªÉm trung b√¨nh
            2. T·ª∑ l·ªá ƒë√°nh gi√° t√≠ch c·ª±c/ti√™u c·ª±c
            3. ∆Øu ƒëi·ªÉm ch√≠nh
            4. Nh∆∞·ª£c ƒëi·ªÉm ch√≠nh (n·∫øu c√≥)
            H√†i h∆∞·ªõc, th√™m 1-2 emoji th√∫ c∆∞ng. Chia th√†nh c√°c ƒëo·∫°n ng·∫Øn ƒë·ªÉ d·ªÖ ƒë·ªçc.`;

            const result = await model.generateContent(context);
            return result.response.text();
        } catch (error) {
            console.error("Error generating AI summary:", error);
            throw new Error("Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t·∫°o t√≥m t·∫Øt. Vui l√≤ng th·ª≠ l·∫°i sau! üôè");
        }
    };

    const formattedSummary = useMemo(() => {
        if (!aiSummary) return [];

        const sentences = aiSummary.split(/(?<=[.!?])\s+/);
        const paragraphs: string[] = [];
        let currentParagraph = '';

        for (const sentence of sentences) {
            if (currentParagraph.length + sentence.length > 100) {
                if (currentParagraph.trim()) {
                    paragraphs.push(currentParagraph.trim());
                }
                currentParagraph = '';
            }
            currentParagraph += sentence + ' ';
        }

        if (currentParagraph.trim()) {
            paragraphs.push(currentParagraph.trim());
        }

        return paragraphs;
    }, [aiSummary]);

    useEffect(() => {
        const handleGenerateSummary = async () => {
            if (!reviews || reviews.length === 0) {
                setAiSummary('Ch∆∞a c√≥ ƒë√°nh gi√° n√†o ƒë·ªÉ ph√¢n t√≠ch. üê±');
                setIsLoading(false);
                return;
            }

            setIsLoading(true);
            setError('');

            try {
                const summary = await generateSummary(reviews);
                setAiSummary(summary);
            } catch (error) {
                console.error("Error getting AI summary:", error);
                setError("Xin l·ªói, kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau. üôè");
            } finally {
                setIsLoading(false);
            }
        };

        handleGenerateSummary();
    }, [reviews]);

    if (reviews.length === 0) {
        return null;
    }

    return (
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg border border-blue-200 shadow-sm mb-6">
            <div className="flex items-center gap-2 mb-4">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-bold">AI</span>
                </div>
                <h3 className="text-lg font-bold text-gray-800">
                    T·ªïng h·ª£p ƒë√°nh gi√° v√† nh·∫≠n x√©t b·ªüi AI
                </h3>
            </div>

            {isLoading && (
                <div className="flex items-center gap-3 text-gray-600">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
                    <span>ƒêang ph√¢n t√≠ch ƒë√°nh gi√°...</span>
                </div>
            )}

            {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p className="text-red-600 text-sm">{error}</p>
                </div>
            )}

            {!isLoading && !error && formattedSummary.length > 0 && (
                <div className="space-y-3">
                    {formattedSummary.map((paragraph, index) => (
                        <p key={index} className="text-gray-700 leading-relaxed">
                            {paragraph}
                        </p>
                    ))}
                </div>
            )}

            {!isLoading && !error && formattedSummary.length === 0 && aiSummary && (
                <div className="space-y-3">
                    <p className="text-gray-700 leading-relaxed">
                        {aiSummary}
                    </p>
                </div>
            )}

            {!isLoading && !error && !aiSummary && (
                <p className="text-gray-500 italic">
                    Ch∆∞a c√≥ ƒë√°nh gi√° n√†o ƒë·ªÉ ph√¢n t√≠ch. üê±
                </p>
            )}
        </div>
    );
};

export default AIReviewSummary;
