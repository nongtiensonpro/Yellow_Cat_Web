'use client';

import { useEffect, useState, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter, useSearchParams } from 'next/navigation';
import {
    Table,
    TableHeader,
    TableColumn,
    TableBody,
    TableRow,
    TableCell,
    Tabs,
    Tab,
    Button,
    Spinner,
    Pagination,
    Card,
    CardBody,
    CardHeader
} from "@heroui/react";
import EditFromOrder from './EditFromOrder';
import { useOrderStore } from './orderStore';

const statusMap: { [key: string]: string } = {
    all: 'T·∫•t c·∫£ ƒë∆°n h√†ng',
    Pending: 'Ch·ªù thanh to√°n',
    Paid: 'ƒê√£ thanh to√°n',
};

interface AppUser {
    appUserId: number;
    keycloakId: string;
    username: string;
    email: string;
    roles: string[];
    enabled: boolean;
    fullName: string;
    phoneNumber: string;
    avatarUrl: string;
    createdAt: string;
    updatedAt: string;
}

interface Order {
    orderId: number;
    orderCode: string;
    customerName?: string;
    phoneNumber?: string;
    orderStatus: string;
    finalAmount: number;
    subTotalAmount: number;
    discountAmount: number;
}

interface ApiResponse {
    status: number;
    message: string;
    data: AppUser;
    error?: string;
}

export default function PurchaseOrder() {
    const { data: session } = useSession();
    const router = useRouter();
    const searchParams = useSearchParams();

    // State ƒë·ªÉ l∆∞u th√¥ng tin user t·ª´ backend
    const [userProfile, setUserProfile] = useState<AppUser | null>(null);
    const [userProfileLoading, setUserProfileLoading] = useState(true);
    const [userProfileError, setUserProfileError] = useState<string | null>(null);
    // ƒê·ªãnh nghƒ©a gi·ªõi h·∫°n t·∫°o h√≥a ƒë∆°n m·ªõi
    const MAX_ORDER_CREATION_LIMIT = 5;

    // State cho toast message - gi·ªù ch·ªâ c√≥ error ho·∫∑c warning
    const [toastMessage, setToastMessage] = useState<{ message: string; type: 'error' | 'warning' } | null>(null);

    // Zustand store - T·∫•t c·∫£ state v√† logic t·ª´ store
    const {
        // States
        orders,
        loading,
        error,
        isCreating,
        page,
        totalPages,
        activeTab,
        isEditMode,

        // Actions
        setPage,
        setActiveTab,
        resetError,

        // API Actions
        fetchOrders,
        createOrder,
        deleteOrder,
        openEditOrder,
    } = useOrderStore();

    // Ki·ªÉm tra th√¥ng tin s·ªë ƒëi·ªán tho·∫°i t·ª´ AppUser (backend)
    const hasPhoneNumber = !!userProfile?.phoneNumber;

    // Extract complex expressions for dependency arrays
    const sessionAccessToken = session?.accessToken;
    const sessionUserId = session?.user?.id;

    // Function ƒë·ªÉ fetch user profile t·ª´ backend
    const fetchUserProfile = useCallback(async (keycloakId: string): Promise<AppUser | null> => {
        try {
            const response = await fetch(`http://localhost:8080/api/users/keycloak-user/${keycloakId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${sessionAccessToken}`,
                },
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.status} - ${response.statusText}`);
            }

            const apiResponse: ApiResponse = await response.json();

            if (apiResponse.status >= 200 && apiResponse.status < 300 && apiResponse.data) {
                return apiResponse.data;
            }

            throw new Error(apiResponse.error || 'Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng');
        } catch (error) {
            console.error('‚ùå Error fetching user profile:', error);
            throw error;
        }
    }, [sessionAccessToken]);

    // Effect ƒë·ªÉ fetch user profile khi session thay ƒë·ªïi
    useEffect(() => {
        const loadUserProfile = async () => {
            if (!sessionUserId || !sessionAccessToken) {
                setUserProfileLoading(false);
                return;
            }

            try {
                setUserProfileLoading(true);
                setUserProfileError(null);

                const profile = await fetchUserProfile(sessionUserId);
                setUserProfile(profile);

                console.log('‚úÖ User profile loaded:', profile);
                console.log('üì± Phone number:', profile?.phoneNumber);
                console.log('üîì Can access features:', !!profile?.phoneNumber);

            } catch (error: unknown) {
                console.error('‚ùå Failed to load user profile:', error);
                const errorMessage = error instanceof Error ? error.message : 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng';
                setUserProfileError(errorMessage);
                setUserProfile(null);
            } finally {
                setUserProfileLoading(false);
            }
        };

        loadUserProfile();
    }, [sessionUserId, sessionAccessToken, fetchUserProfile]);

    // Handler ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang c·∫≠p nh·∫≠t th√¥ng tin
    const handleGoToUpdateProfile = () => {
        router.push('/user_info');
    };

    // Handler ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng
    const handleViewDetails = useCallback((order: Order) => {
        if (!userProfileLoading && !userProfileError && hasPhoneNumber) {
            openEditOrder(order as Parameters<typeof openEditOrder>[0]);
        }
    }, [userProfileLoading, userProfileError, hasPhoneNumber, openEditOrder]);

    // Auto-fetch orders when dependencies change - ch·ªâ khi c√≥ s·ªë ƒëi·ªán tho·∫°i v√† ƒë√£ load xong profile
    useEffect(() => {
        if (!userProfileLoading && hasPhoneNumber && sessionAccessToken) {
            fetchOrders(session);
        }
    }, [session, page, activeTab, fetchOrders, hasPhoneNumber, userProfileLoading, sessionAccessToken]);

    // T·ª± ƒë·ªông m·ªü order khi c√≥ query parameter viewOrder
    useEffect(() => {
        const viewOrderCode = searchParams.get('viewOrder');
        if (viewOrderCode && orders.length > 0 && !isEditMode && hasPhoneNumber && !userProfileLoading) {
            const orderToOpen = orders.find(order => order.orderCode === viewOrderCode);
            if (orderToOpen) {
                console.log('üéØ Auto-opening order from URL:', viewOrderCode);
                handleViewDetails(orderToOpen);
                // X√≥a query parameter sau khi ƒë√£ m·ªü order
                router.replace('/staff/officesales');
            }
        }
    }, [searchParams, orders, isEditMode, router, hasPhoneNumber, userProfileLoading, handleViewDetails]);

    // Function to show a toast message (only warning/error now)
    const showToast = useCallback((message: string, type: 'error' | 'warning' = 'warning') => {
        setToastMessage({ message, type });
        const timer = setTimeout(() => {
            setToastMessage(null);
        }, 5000); // Hide after 5 seconds
        return () => clearTimeout(timer);
    }, []);

    // Handlers using store functions
    const handleTabSelectionChange = (key: string | number) => {
        setActiveTab(key);
    };

    const handleCreateOrder = async () => {
        // First, check if the user is authorized (profile loaded and has phone number)
        if (userProfileLoading || userProfileError !== null || !hasPhoneNumber) {
            showToast("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra th√¥ng tin t√†i kho·∫£n v√† s·ªë ƒëi·ªán tho·∫°i.", 'warning');
            return;
        }

        // --- MODIFICATION START ---
        // Filter for "Pending" orders only
        const pendingOrders = orders.filter(order => order.orderStatus === 'Pending');

        // Check if the maximum order creation limit has been reached for PENDING orders
        if (pendingOrders.length >= MAX_ORDER_CREATION_LIMIT) {
            showToast(`B·∫°n ch·ªâ ƒë∆∞·ª£c ph√©p t·∫°o t·ªëi ƒëa ${MAX_ORDER_CREATION_LIMIT} ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'Ch·ªù thanh to√°n'. Vui l√≤ng ho√†n t·∫•t ho·∫∑c x√≥a c√°c ƒë∆°n h√†ng ƒëang ch·ªù tr∆∞·ªõc khi t·∫°o m·ªõi.`, 'warning');
            return; // Stop the function execution
        }
        // --- MODIFICATION END ---

        // If limits are not met, proceed to create the order
        // No success toast for creation as requested.
        await createOrder(session);
    };

    const handleDeleteOrder = async (orderId: number) => {
        if (!userProfileLoading && !userProfileError && hasPhoneNumber) {
            await deleteOrder(orderId, session);
            // No success toast for deletion as requested.
        }
    };

    // Render table content with all states handled by store
    const renderTableContent = () => {
        if (loading) {
            return <div className="flex justify-center items-center h-64"><Spinner label="ƒêang t·∫£i..." /></div>;
        }

        if (error) {
            return <div className="text-center text-red-500 p-4 h-64">{error}</div>;
        }

        if (orders.length === 0) {
            return (
                <div className="text-center text-gray-500 p-8 h-64 flex flex-col items-center justify-center">
                    <p className="text-lg font-medium mb-2">Ch∆∞a c√≥ ƒë∆°n h√†ng t·∫°i qu·∫ßy n√†o</p>
                    <p className="text-sm">T·∫°o ƒë∆°n h√†ng m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu b√°n h√†ng tr·ª±c ti·∫øp</p>
                </div>
            );
        }

        return (
            <Table
                aria-label="B·∫£ng danh s√°ch ƒë∆°n h√†ng"
                bottomContent={
                    totalPages > 1 ? (
                        <div className="flex w-full justify-center">
                            <Pagination
                                isCompact
                                showControls
                                showShadow
                                color="primary"
                                page={page}
                                total={totalPages}
                                onChange={setPage}
                            />
                        </div>
                    ) : null
                }
            >
                <TableHeader>
                    <TableColumn>M√É ƒê∆†N H√ÄNG</TableColumn>
                    <TableColumn>KH√ÅCH H√ÄNG</TableColumn>
                    <TableColumn>S·ªê ƒêI·ªÜN THO·∫†I</TableColumn>
                    <TableColumn>TR·∫†NG TH√ÅI</TableColumn>
                    <TableColumn className="text-right">T·ªîNG TI·ªÄN</TableColumn>
                    <TableColumn>H√ÄNH ƒê·ªòNG</TableColumn>
                </TableHeader>
                <TableBody emptyContent={" Kh√¥ng c√≥ ƒë∆°n h√†ng t·∫°i qu·∫ßy n√†o."}>
                    {orders.map((order) => (
                        <TableRow key={order.orderId}>
                            <TableCell>{order.orderCode}</TableCell>
                            <TableCell>{order.customerName || 'Kh√°ch l·∫ª'}</TableCell>
                            <TableCell>{order.phoneNumber || 'Kh√¥ng c√≥ th√¥ng tin'}</TableCell>
                            <TableCell>
                                <div className="flex flex-col gap-1">
                                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${order.orderStatus === 'Paid' ? 'bg-green-100 text-green-800' :
                                        'bg-gray-100 text-gray-800'
                                    }`}>
                                        {order.orderStatus === 'Paid' ? '' : ''}
                                        {' '}
                                        {statusMap[order.orderStatus as keyof typeof statusMap] || order.orderStatus}
                                    </span>
                                </div>
                            </TableCell>
                            <TableCell className="text-right">{order.finalAmount.toLocaleString('vi-VN')} VND</TableCell>
                            <TableCell className="flex gap-2">
                                <Button
                                    size="sm"
                                    color="primary"
                                    variant="flat"
                                    onPress={() => handleViewDetails(order)}
                                    disabled={userProfileLoading || userProfileError !== null || !hasPhoneNumber}
                                    title={
                                        userProfileLoading ? "ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n..." :
                                            userProfileError ? "C√≥ l·ªói khi t·∫£i th√¥ng tin t√†i kho·∫£n" :
                                                !hasPhoneNumber ? "Vui l√≤ng c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y" : ""
                                    }
                                >
                                    {order.orderStatus === 'Paid' ? ' Xem chi ti·∫øt' : ' X·ª≠ l√Ω ƒë∆°n h√†ng'}
                                </Button>
                                {order.orderStatus!='Paid' &&<Button
                                    size="sm"
                                    color="danger"
                                    variant="flat"
                                    onPress={() => handleDeleteOrder(order.orderId)}
                                    disabled={userProfileLoading || userProfileError !== null || !hasPhoneNumber}
                                    title={
                                        userProfileLoading ? "ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n..." :
                                            userProfileError ? "C√≥ l·ªói khi t·∫£i th√¥ng tin t√†i kho·∫£n" :
                                                !hasPhoneNumber ? "Vui l√≤ng c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y" : ""
                                    }
                                >
                                    X√≥a
                                </Button>}
                            </TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        )
    };

    // Component hi·ªÉn th·ªã tr·∫°ng th√°i loading user profile
    const renderUserProfileLoading = () => (
        <Card className="mb-6 border-blue-200 bg-blue-50">
            <CardBody>
                <div className="flex items-center justify-center gap-3 py-4">
                    <Spinner size="md" color="primary" />
                    <span className="text-blue-700">ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...</span>
                </div>
            </CardBody>
        </Card>
    );

    // Component hi·ªÉn th·ªã l·ªói khi load user profile
    const renderUserProfileError = () => (
        <Card className="mb-6 border-red-200 bg-red-50">
            <CardHeader className="pb-3">
                <div className="flex items-center gap-2">
                    <span className="text-2xl"></span>
                    <h3 className="text-lg font-bold text-red-800">L·ªói t·∫£i th√¥ng tin t√†i kho·∫£n</h3>
                </div>
            </CardHeader>
            <CardBody className="pt-0">
                <div className="space-y-3">
                    <p className="text-red-700">
                        {userProfileError}
                    </p>
                    <div className="flex gap-3 mt-4">
                        <Button
                            color="danger"
                            variant="solid"
                            onPress={() => window.location.reload()}
                            startContent="üîÑ"
                        >
                            Th·ª≠ l·∫°i
                        </Button>
                        <Button
                            color="default"
                            variant="light"
                            onPress={handleGoToUpdateProfile}
                            startContent="üìù"
                        >
                            C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                        </Button>
                    </div>
                </div>
            </CardBody>
        </Card>
    );

    // Component c·∫£nh b√°o thi·∫øu s·ªë ƒëi·ªán tho·∫°i
    const renderPhoneWarning = () => (
        <Card className="mb-6 border-warning-200 bg-warning-50">
            <CardHeader className="pb-3">
                <div className="flex items-center gap-2">
                    <span className="text-2xl">‚ö†Ô∏è</span>
                    <h3 className="text-lg font-bold text-warning-800">C·∫£nh b√°o: Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc</h3>
                </div>
            </CardHeader>
            <CardBody className="pt-0">
                <div className="space-y-3">
                    <p className="text-warning-700">
                        B·∫°n c·∫ßn c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i trong h·ªì s∆° c√° nh√¢n ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng b√°n h√†ng t·∫°i qu·∫ßy.
                    </p>
                    <p className="text-sm text-warning-600">
                        S·ªë ƒëi·ªán tho·∫°i nh√¢n vi√™n l√† th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi ph·ª• tr√°ch v√† li√™n h·ªá v·ªõi kh√°ch h√†ng khi c·∫ßn thi·∫øt.
                    </p>
                    <div className="flex gap-3 mt-4">
                        <p className="text-sm text-gray-600 bg-gray-100 p-2 rounded">
                            üìã T√†i kho·∫£n hi·ªán t·∫°i: {userProfile?.fullName || userProfile?.email || 'Kh√¥ng x√°c ƒë·ªãnh'}
                        </p>
                    </div>
                    <div className="flex gap-3 mt-4">
                        <Button
                            color="warning"
                            variant="solid"
                            onPress={handleGoToUpdateProfile}
                            startContent="üìù"
                        >
                            C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
                        </Button>
                        <Button
                            color="default"
                            variant="light"
                            onPress={() => window.location.reload()}
                            startContent="üîÑ"
                        >
                            T·∫£i l·∫°i trang
                        </Button>
                    </div>
                </div>
            </CardBody>
        </Card>
    );

    // Conditional rendering based on store state
    if (isEditMode) {
        return <EditFromOrder />;
    }

    return (
        <div className="flex w-full flex-col gap-4 p-4">
            {/* Toast Message Display */}
            {toastMessage && (
                <div className={`fixed top-4 right-4 z-50 p-4 pr-6 rounded-lg border-l-4 shadow-lg flex items-center gap-3 transform transition-transform duration-300 ease-out translate-x-0
                    ${toastMessage.type === 'error' ? 'bg-red-50 border-red-500 text-red-700' :
                    'bg-yellow-50 border-yellow-500 text-yellow-700'}`}
                >
                    <span className="text-xl">
                        {toastMessage.type === 'error' ? '‚ùå' : '‚ö†Ô∏è'}
                    </span>
                    <p className="font-semibold">{toastMessage.message}</p>
                    <Button
                        isIconOnly
                        variant="light"
                        size="sm"
                        onPress={() => setToastMessage(null)}
                        className="ml-auto text-current" // Use current text color for button icon
                    >
                        &times;
                    </Button>
                </div>
            )}

            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold">Qu·∫£n l√Ω ƒê∆°n h√†ng</h1>
                <Button
                    color="primary"
                    onClick={handleCreateOrder}
                    disabled={isCreating || userProfileLoading || userProfileError !== null || !hasPhoneNumber}
                    title={
                        userProfileLoading ? "ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n..." :
                            userProfileError ? "C√≥ l·ªói khi t·∫£i th√¥ng tin t√†i kho·∫£n" :
                                !hasPhoneNumber ? "Vui l√≤ng c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng" : ""
                    }
                >
                    {isCreating ? <Spinner color="white" size="sm" /> : "T·∫°o ƒê∆°n H√†ng M·ªõi"}
                </Button>
            </div>

            {/* Hi·ªÉn th·ªã tr·∫°ng th√°i loading user profile */}
            {userProfileLoading && renderUserProfileLoading()}

            {/* Hi·ªÉn th·ªã l·ªói khi load user profile */}
            {userProfileError && renderUserProfileError()}

            {/* Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i (ch·ªâ khi ƒë√£ load xong profile) */}
            {!userProfileLoading && !userProfileError && !hasPhoneNumber && renderPhoneWarning()}

            {/* Error handling from store */}
            {error && !isCreating && (
                <div className="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
                    <span className="font-medium">L·ªói!</span> {error}
                    <Button
                        size="sm"
                        variant="light"
                        color="danger"
                        className="ml-2"
                        onPress={resetError}
                    >
                        ƒê√≥ng
                    </Button>
                </div>
            )}

            {/* Tabs with store state - Disable khi kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i ho·∫∑c ƒëang loading */}
            <div className={userProfileLoading || userProfileError || !hasPhoneNumber ? "pointer-events-none opacity-50" : ""}>
                <Tabs
                    aria-label="L·ªçc ƒë∆°n h√†ng theo tr·∫°ng th√°i"
                    items={Object.keys(statusMap).map(statusKey => ({
                        id: statusKey,
                        label: statusMap[statusKey as keyof typeof statusMap]
                    }))}
                    selectedKey={activeTab}
                    onSelectionChange={handleTabSelectionChange}
                    color="primary"
                    variant="underlined"
                    isDisabled={userProfileLoading || userProfileError !== null || !hasPhoneNumber}
                >
                    {(item) => (
                        <Tab key={item.id} title={item.label}>
                            {(!userProfileLoading && !userProfileError && hasPhoneNumber) ? renderTableContent() : (
                                <div className="text-center py-20 text-gray-500">
                                    {userProfileLoading ? (
                                        <>
                                            <Spinner size="lg" className="mb-4" />
                                            <p>ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...</p>
                                        </>
                                    ) : userProfileError ? (
                                        <>
                                            <p className="text-lg mb-2">‚ùå</p>
                                            <p>C√≥ l·ªói khi t·∫£i th√¥ng tin t√†i kho·∫£n</p>
                                        </>
                                    ) : (
                                        <>
                                            <p className="text-lg mb-2">üì±</p>
                                            <p>Vui l√≤ng c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y</p>
                                        </>
                                    )}
                                </div>
                            )}
                        </Tab>
                    )}
                </Tabs>
            </div>

            {/* Overlay c·∫£nh b√°o khi kh√¥ng th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng */}
            {(!userProfileLoading && !userProfileError && !hasPhoneNumber) && (
                <div className="fixed inset-0 bg-black bg-opacity-20 pointer-events-none z-10 flex items-center justify-center">
                    <div className="bg-white p-6 rounded-lg shadow-lg max-w-md mx-4 border-2 border-warning-300">
                        <div className="text-center">
                            <span className="text-4xl mb-4 block">üîí</span>
                            <h3 className="text-lg font-bold text-gray-800">T√≠nh nƒÉng b·ªã kh√≥a</h3>
                            <p className="text-sm text-gray-600">
                                C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng b√°n h√†ng t·∫°i qu·∫ßy
                            </p>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}