'use client';

import { useEffect, useState, useCallback } from 'react'
import Link from 'next/link'
import { Eye, Edit, Info, Trash2 } from 'lucide-react'
import { useSession } from 'next-auth/react'
import axios from 'axios'
import PromotionGuide from '../../../components/promotion/PromotionGuide'

interface Promotion {
    id: number
    promotionName: string
    discountValue: number
    discountType: string
    startDate: string
    endDate: string
}

// H√†m format discount chu·∫©n
function formatDiscount(value: number, type: string): string {
    const t = type.toLowerCase()
    if (t === 'percentage') return `${value}%`
    if (t === 'fixed' || t === 'fixed_amount') return `${value.toLocaleString()} ‚Ç´`
    if (t === 'free_shipping') return 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn'
    return `${value}`
}

export default function PromotionManagementPage() {
    const [promotions, setPromotions] = useState<Promotion[]>([])
    const [filters, setFilters] = useState({
        keyword: '',
        status: '',
        discountType: '',
        discountValue: '',
    })
    const { data: session, status } = useSession()
    const [loading, setLoading] = useState(false)
    const [deletingId, setDeletingId] = useState<number | null>(null)

    const [currentPage, setCurrentPage] = useState(1)
    const itemsPerPage = 5

    const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080'

    const loadData = useCallback(async () => {
        if (status !== 'authenticated') return

        const token = session?.accessToken
        if (!token) {
            alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch khuy·∫øn m√£i.')
            return
        }

        const queryParams = new URLSearchParams()
        if (filters.keyword) queryParams.append('keyword', filters.keyword)
        if (filters.status) queryParams.append('status', filters.status)
        if (filters.discountType) queryParams.append('discountType', filters.discountType)
        if (filters.discountValue) queryParams.append('discountValue', filters.discountValue)

        setLoading(true)
        try {
            const response = await fetch(`${API_URL}/api/promotion-products?${queryParams.toString()}`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
            const data = await response.json()
            
            console.log('API Response:', data) // Debug log
            
            // Ki·ªÉm tra v√† x·ª≠ l√Ω response structure
            let dataArray = data
            if (data && typeof data === 'object') {
                // N·∫øu data c√≥ structure { data: [...] } ho·∫∑c { content: [...] }
                if (data.data && Array.isArray(data.data)) {
                    dataArray = data.data
                } else if (data.content && Array.isArray(data.content)) {
                    dataArray = data.content
                } else if (!Array.isArray(data)) {
                    dataArray = []
                }
            }
            
            // ƒê·∫£m b·∫£o dataArray l√† array
            if (!Array.isArray(dataArray)) {
                console.warn('API response is not an array:', dataArray)
                dataArray = []
            }
            
            const mapped: Promotion[] = dataArray.map((item: any) => ({
                id: item.promotionProductId || item.id,
                promotionName: item.promotionName || '',
                discountValue: item.discountValue || 0,
                discountType: item.discountType || '',
                startDate: item.startDate || '',
                endDate: item.endDate || '',
            }))
            setPromotions(mapped)
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ t·∫£i khuy·∫øn m√£i:', error)
            alert('L·ªói khi t·∫£i d·ªØ li·ªáu khuy·∫øn m√£i.')
            setPromotions([]) // Set empty array on error
        } finally {
            setLoading(false)
        }
    }, [filters, session, status, API_URL])

    const handleDelete = async (promotion: Promotion) => {
        const now = new Date()
        const isActive = now >= new Date(promotion.startDate) && now <= new Date(promotion.endDate)
        
        if (isActive) {
            alert('‚ùå Kh√¥ng th·ªÉ x√≥a ƒë·ª£t gi·∫£m gi√° ƒëang ho·∫°t ƒë·ªông!')
            return
        }

        const confirmMessage = `‚ö†Ô∏è B·∫†N CH·∫ÆC CH·∫ÆN MU·ªêN X√ìA ƒê·ª¢T GI·∫¢M GI√Å N√ÄY?

üìã T√™n: ${promotion.promotionName}
üí∞ Gi·∫£m: ${formatDiscount(promotion.discountValue, promotion.discountType)}
üìÖ T·ª´: ${formatDateTime(promotion.startDate)}
üìÖ ƒê·∫øn: ${formatDateTime(promotion.endDate)}

‚ùó C·∫¢NH B√ÅO: 
‚Ä¢ To√†n b·ªô ƒë·ª£t gi·∫£m gi√° s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn
‚Ä¢ T·∫•t c·∫£ s·∫£n ph·∫©m trong ƒë·ª£t n√†y s·∫Ω kh√¥ng c√≤n gi·∫£m gi√°
‚Ä¢ H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC

Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n x√≥a, Cancel ƒë·ªÉ h·ªßy b·ªè.`

        if (!window.confirm(confirmMessage)) {
            return
        }

        setDeletingId(promotion.id)

        try {
            await axios.delete(`${API_URL}/api/promotion-products/${promotion.id}`, {
                headers: {
                    Authorization: `Bearer ${session?.accessToken}`,
                },
            })

            alert('‚úÖ X√≥a ƒë·ª£t gi·∫£m gi√° th√†nh c√¥ng!')
            
            // Reload data
            await loadData()
            
            // Reset page if current page becomes empty
            const newTotalItems = promotions.length - 1
            const newPageCount = Math.ceil(newTotalItems / itemsPerPage)
            if (currentPage > newPageCount && newPageCount > 0) {
                setCurrentPage(newPageCount)
            }
        } catch (err: any) {
            console.error('L·ªói khi x√≥a:', err)
            
            const errorMessage = err?.response?.data?.message || 
                               err?.response?.data?.error ||
                               err?.response?.data ||
                               err.message ||
                               'L·ªói kh√¥ng x√°c ƒë·ªãnh'
                               
            if (errorMessage.includes('kh√¥ng c√≥ quy·ªÅn') || errorMessage.includes('unauthorized')) {
                alert('‚ùå L·ªói quy·ªÅn truy c·∫≠p: B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ƒë·ª£t gi·∫£m gi√° n√†y. Ch·ªâ ng∆∞·ªùi t·∫°o ra ƒë·ª£t gi·∫£m gi√° m·ªõi c√≥ quy·ªÅn x√≥a.')
            } else if (err?.response?.status === 404) {
                alert('‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ª£t gi·∫£m gi√° c·∫ßn x√≥a.')
            } else if (err?.response?.status === 401) {
                alert('‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
            } else {
                alert('‚ùå L·ªói khi x√≥a: ' + errorMessage)
            }
        } finally {
            setDeletingId(null)
        }
    }

    useEffect(() => {
        loadData()
    }, [loadData])

    const formatDateTime = (dateStr: string) => {
        const date = new Date(dateStr)
        return new Intl.DateTimeFormat('vi-VN', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
        }).format(date)
    }

    const pageCount = Math.ceil(promotions.length / itemsPerPage)
    const currentPromotions = promotions.slice(
        (currentPage - 1) * itemsPerPage,
        currentPage * itemsPerPage
    )

    // Statistics
    const now = new Date()
    const activePromotions = promotions.filter(p => 
        now >= new Date(p.startDate) && now <= new Date(p.endDate)
    ).length
    const expiredPromotions = promotions.filter(p => 
        now > new Date(p.endDate)
    ).length

    return (
        <div className="p-6 space-y-6 bg-gray-50 min-h-screen">
            <div className="flex items-center justify-between mb-4">
                <div>
                    <h2 className="text-xl font-semibold text-gray-800">Danh s√°ch ƒê·ª£t gi·∫£m gi√°</h2>
                    <p className="text-sm text-gray-600 mt-1">Qu·∫£n l√Ω gi·∫£m gi√° √°p d·ª•ng tr·ª±c ti·∫øp l√™n s·∫£n ph·∫©m c·ª• th·ªÉ</p>
                </div>
                <div className="flex items-center gap-3">
                    <PromotionGuide type="PRODUCT" />
                    <Link
                        href="/admin/promotion_products/create"
                        className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 text-sm font-medium"
                    >
                        + TH√äM M·ªöI
                    </Link>
                </div>
            </div>

            {/* Info Card */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                    <Info className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                    <div>
                        <h3 className="font-medium text-blue-800 mb-1">üí° Gi·∫£m gi√° S·∫£n ph·∫©m ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?</h3>
                        <p className="text-sm text-blue-700 mb-2">
                            Ch·ªçn s·∫£n ph·∫©m c·ª• th·ªÉ ‚Üí ƒê·∫∑t % ho·∫∑c s·ªë ti·ªÅn gi·∫£m ‚Üí Gi√° s·∫£n ph·∫©m t·ª± ƒë·ªông c·∫≠p nh·∫≠t tr√™n website
                        </p>
                        <div className="text-xs text-blue-600 space-y-1">
                            <p><strong>V√≠ d·ª•:</strong> √Åo thun 500k ‚Üí Gi·∫£m 20% ‚Üí Customer th·∫•y 400k ngay tr√™n web</p>
                            <p><strong>Ph√π h·ª£p:</strong> Flash Sale, Sale thanh l√Ω, Sale theo danh m·ª•c s·∫£n ph·∫©m</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Delete Warning */}
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <div className="flex items-start gap-3">
                    <Trash2 className="w-5 h-5 text-orange-600 mt-0.5 flex-shrink-0" />
                    <div>
                        <h3 className="font-medium text-orange-800 mb-1">‚ö†Ô∏è L∆∞u √Ω v·ªÅ vi·ªác x√≥a ƒë·ª£t gi·∫£m gi√°</h3>
                        <div className="text-sm text-orange-700 space-y-1">
                            <p>‚Ä¢ <strong>Kh√¥ng th·ªÉ x√≥a</strong> ƒë·ª£t gi·∫£m gi√° ƒëang ho·∫°t ƒë·ªông (tr·∫°ng th√°i "ƒêang di·ªÖn ra")</p>
                            <p>‚Ä¢ <strong>Ch·ªâ ng∆∞·ªùi t·∫°o</strong> m·ªõi c√≥ quy·ªÅn x√≥a ƒë·ª£t gi·∫£m gi√° c·ªßa m√¨nh</p>
                            <p>‚Ä¢ <strong>X√≥a vƒ©nh vi·ªÖn:</strong> To√†n b·ªô d·ªØ li·ªáu s·∫Ω m·∫•t v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                <div className="bg-white rounded border p-3 shadow-sm">
                    <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600">{promotions.length}</div>
                        <div className="text-sm text-gray-600">T·ªïng ƒë·ª£t gi·∫£m gi√°</div>
                    </div>
                </div>
                <div className="bg-white rounded border p-3 shadow-sm">
                    <div className="text-center">
                        <div className="text-2xl font-bold text-green-600">{activePromotions}</div>
                        <div className="text-sm text-gray-600">ƒêang ho·∫°t ƒë·ªông</div>
                    </div>
                </div>
                <div className="bg-white rounded border p-3 shadow-sm">
                    <div className="text-center">
                        <div className="text-2xl font-bold text-gray-600">{expiredPromotions}</div>
                        <div className="text-sm text-gray-600">ƒê√£ h·∫øt h·∫°n</div>
                    </div>
                </div>
                <div className="bg-white rounded border p-3 shadow-sm">
                    <div className="text-center">
                        <div className="text-2xl font-bold text-red-600">{deletingId ? '1' : '0'}</div>
                        <div className="text-sm text-gray-600">ƒêang x√≥a</div>
                    </div>
                </div>
            </div>

            <div className="bg-white rounded border p-4 shadow-sm">
                <h3 className="font-medium text-gray-800 mb-3">üîç B·ªô l·ªçc t√¨m ki·∫øm</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                    <input
                        type="text"
                        placeholder="T√¨m theo t√™n ƒë·ª£t gi·∫£m gi√°"
                        className="border rounded px-3 py-2"
                        value={filters.keyword}
                        onChange={(e) =>
                            setFilters({ ...filters, keyword: e.target.value })
                        }
                    />
                    <select
                        className="border rounded px-3 py-2"
                        value={filters.status}
                        onChange={(e) =>
                            setFilters({ ...filters, status: e.target.value })
                        }
                    >
                        <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                        <option value="active">ƒêang di·ªÖn ra</option>
                        <option value="inactive">ƒê√£ k·∫øt th√∫c</option>
                    </select>
                    <select
                        className="border rounded px-3 py-2"
                        value={filters.discountType}
                        onChange={(e) =>
                            setFilters({
                                ...filters,
                                discountType: e.target.value,
                                discountValue: '',
                            })
                        }
                    >
                        <option value="">T·∫•t c·∫£ lo·∫°i gi·∫£m</option>
                        <option value="percentage">Gi·∫£m theo %</option>
                        <option value="fixed_amount">Gi·∫£m s·ªë ti·ªÅn</option>
                        <option value="free_shipping">Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</option>
                    </select>
                    
                    {filters.discountType && filters.discountType !== 'free_shipping' && (
                        <input
                            type="number"
                            placeholder={`Nh·∫≠p gi√° tr·ªã ${filters.discountType === 'percentage' ? '(%)' : '(VNƒê)'}`}
                            className="border rounded px-3 py-2"
                            value={filters.discountValue}
                            onChange={(e) =>
                                setFilters({ ...filters, discountValue: e.target.value })
                            }
                        />
                    )}
                </div>

                <div className="mt-4">
                    <button
                        onClick={() => {
                            setFilters({
                                keyword: '',
                                status: '',
                                discountType: '',
                                discountValue: '',
                            })
                            setCurrentPage(1)
                        }}
                        className="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded text-sm"
                    >
                        L√†m m·ªõi b·ªô l·ªçc
                    </button>
                </div>
            </div>

            <div className="overflow-x-auto bg-white shadow border rounded">
                <table className="min-w-full text-sm text-left border">
                    <thead className="bg-gray-100 text-gray-700 uppercase text-xs">
                    <tr>
                        <th className="px-4 py-3 border">STT</th>
                        <th className="px-4 py-3 border">T√™n ƒê·ª£t gi·∫£m gi√°</th>
                        <th className="px-4 py-3 border">Gi√° tr·ªã</th>
                        <th className="px-4 py-3 border">Tr·∫°ng th√°i</th>
                        <th className="px-4 py-3 border">B·∫Øt ƒë·∫ßu</th>
                        <th className="px-4 py-3 border">K·∫øt th√∫c</th>
                        <th className="px-4 py-3 border">Ho·∫°t ƒë·ªông</th>
                    </tr>
                    </thead>
                    <tbody>
                    {loading ? (
                        <tr>
                            <td colSpan={7} className="px-4 py-8 text-center">
                                <div className="flex items-center justify-center gap-2">
                                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                                    <span className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</span>
                                </div>
                            </td>
                        </tr>
                    ) : currentPromotions.length === 0 ? (
                        <tr>
                            <td colSpan={7} className="px-4 py-8 text-center text-gray-500">
                                Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p
                            </td>
                        </tr>
                    ) : (
                        currentPromotions.map((promo, index) => {
                        const now = new Date()
                        const isActive = now >= new Date(promo.startDate) && now <= new Date(promo.endDate)
                        const isDeleting = deletingId === promo.id

                        return (
                            <tr 
                                key={promo.id} 
                                className={`border-b ${
                                    isDeleting 
                                        ? 'bg-red-50 opacity-60' 
                                        : 'hover:bg-gray-50'
                                }`}
                            >
                                <td className="px-4 py-2 border text-center">
                                    {(currentPage - 1) * itemsPerPage + index + 1}
                                </td>
                                <td className="px-4 py-2 border">{promo.promotionName}</td>
                                <td className="px-4 py-2 border text-center">
                                    {formatDiscount(promo.discountValue, promo.discountType)}
                                </td>
                                <td className="px-4 py-2 border text-center">
                    <span className={`text-xs px-2 py-1 rounded text-white ${
                        isActive ? 'bg-green-500' : 'bg-gray-400'
                    }`}>
                      {isActive ? 'ƒêang di·ªÖn ra' : 'H·∫øt h·∫°n'}
                    </span>
                                </td>
                                <td className="px-4 py-2 border text-center">
                                    {formatDateTime(promo.startDate)}
                                </td>
                                <td className="px-4 py-2 border text-center">
                                    {formatDateTime(promo.endDate)}
                                </td>
                                <td className="px-4 py-2 border text-center">
                                    <div className="flex items-center justify-center gap-2">
                                        <Link
                                            href={`/admin/promotion_products/${promo.id}`}
                                            className="text-orange-500 hover:text-orange-600 p-1"
                                            title="Ch·ªânh s·ª≠a"
                                        >
                                            <Edit size={16} />
                                        </Link>
                                        <button
                                            onClick={() => handleDelete(promo)}
                                            disabled={isActive || deletingId === promo.id}
                                            className={`p-1 relative ${
                                                isActive || deletingId === promo.id
                                                    ? 'text-gray-400 cursor-not-allowed'
                                                    : 'text-red-500 hover:text-red-600'
                                            }`}
                                            title={
                                                isActive
                                                    ? 'Kh√¥ng th·ªÉ x√≥a ƒë·ª£t gi·∫£m gi√° ƒëang ho·∫°t ƒë·ªông'
                                                    : deletingId === promo.id
                                                    ? 'ƒêang x√≥a...'
                                                    : 'X√≥a ƒë·ª£t gi·∫£m gi√°'
                                            }
                                        >
                                            {deletingId === promo.id ? (
                                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-red-500"></div>
                                            ) : (
                                                <Trash2 size={16} />
                                            )}
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        )
                    }))}
                    </tbody>
                </table>

                {pageCount > 1 && (
                    <div className="flex justify-center items-center mt-4 gap-2">
                        <button
                            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                            disabled={currentPage === 1}
                            className="px-3 py-1 border rounded disabled:opacity-50"
                        >
                            Tr∆∞·ªõc
                        </button>
                        {Array.from({ length: pageCount }, (_, i) => i + 1).map((page) => (
                            <button
                                key={page}
                                onClick={() => setCurrentPage(page)}
                                className={`w-8 h-8 rounded-full text-sm border ${
                                    page === currentPage
                                        ? 'bg-blue-600 text-white'
                                        : 'hover:bg-gray-200'
                                }`}
                            >
                                {page}
                            </button>
                        ))}
                        <button
                            onClick={() =>
                                setCurrentPage((prev) => Math.min(prev + 1, pageCount))
                            }
                            disabled={currentPage === pageCount}
                            className="px-3 py-1 border rounded disabled:opacity-50"
                        >
                            Sau
                        </button>
                    </div>
                )}
            </div>
        </div>
    )
}