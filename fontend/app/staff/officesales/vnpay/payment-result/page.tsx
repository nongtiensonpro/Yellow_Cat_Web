'use client';

import { useEffect, useState, useCallback } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

interface PaymentResponse {
    paymentId: number;
    paymentMethod: string;
    amount: number;
    paymentStatus: string;
}

interface OrderDetailResponse {
    orderId: number;
    orderCode: string;
    phoneNumber: string;
    customerName: string;
    subTotalAmount: number;
    discountAmount: number;
    finalAmount: number;
    orderStatus: string;
    payments: PaymentResponse[];
}


const POLLING_INTERVAL = 2000;
const MAX_POLLING_ATTEMPTS = 6;

export default function PaymentResultPage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const { data: session } = useSession();

    const [result, setResult] = useState<any>(null);
    const [orderData, setOrderData] = useState<OrderDetailResponse | null>(null);
    const [error, setError] = useState<string | null>(null);

    // State qu·∫£n l√Ω lu·ªìng
    const [isLoading, setIsLoading] = useState(true);
    const [isConfirming, setIsConfirming] = useState(false);
    const [confirmationComplete, setConfirmationComplete] = useState(false);
    const [hasInitiated, setHasInitiated] = useState(false);
    const [countdown, setCountdown] = useState(10);

    // H√†m confirm payment v·ªõi backend (ch·ªâ g·ªçi m·ªôt l·∫ßn)**
    const confirmPaymentWithBackend = async (orderCode: string, transactionId: string, token: string): Promise<boolean> => {
        try {
            console.log('üöÄ Confirming payment with backend:', { orderCode, transactionId });
            
            const response = await fetch(`http://localhost:8080/api/orders/vnpay-confirm/${orderCode}?transactionId=${transactionId}`, {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` },
            });
            
            console.log('üì• Confirm response status:', response.status);
            console.log('üì• Confirm response OK:', response.ok);
            
            if (!response.ok) {
                const errorBody = await response.text();
                console.error("Payment confirmation error:", errorBody);
                throw new Error(`L·ªói x√°c nh·∫≠n thanh to√°n: ${response.status} - ${errorBody}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ Payment confirmed successfully:', data);
            console.log('üìä Confirmed order status:', data.data?.orderStatus);
            return true;
        } catch (err) {
            console.error('‚ùå L·ªói khi x√°c nh·∫≠n thanh to√°n:', err);
            throw err;
        }
    };

    // H√†m check status ƒë∆°n h√†ng (d√πng cho polling)**
    const getOrderStatus = async (orderCode: string, token: string): Promise<OrderDetailResponse | null> => {
        try {
            const response = await fetch(`http://localhost:8080/api/orders/status/${orderCode}`, {
                headers: { 'Authorization': `Bearer ${token}` },
            });
            
            if (!response.ok) {
                const errorBody = await response.text();
                console.error("API Error Response:", errorBody);
                throw new Error(`L·ªói t·ª´ m√°y ch·ªß: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üîç Full API Response:', data);
            console.log('üìä Order Data:', data.data);
            console.log('üìà Order Status:', data.data?.orderStatus);
            console.log('üí≥ Payments:', data.data?.payments);

            return data.data as OrderDetailResponse;
        } catch (err) {
            console.error('L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n h√†ng:', err);
            throw err;
        }
    };

    // Logic x√°c nh·∫≠n v√† polling tr·∫°ng th√°i**
    const handlePaymentConfirmation = useCallback(async (orderCode: string, transactionId: string, token: string) => {
        setIsConfirming(true);
        setError(null);

        try {
            // B∆∞·ªõc 1: Confirm payment v·ªõi backend (ch·ªâ m·ªôt l·∫ßn)
            console.log('B∆∞·ªõc 1: X√°c nh·∫≠n thanh to√°n v·ªõi backend...');
            await confirmPaymentWithBackend(orderCode, transactionId, token);
            
            // B∆∞·ªõc 2: Polling ƒë·ªÉ check status c·∫≠p nh·∫≠t
            console.log('B∆∞·ªõc 2: B·∫Øt ƒë·∫ßu polling ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i...');
            for (let attempt = 1; attempt <= MAX_POLLING_ATTEMPTS; attempt++) {
                console.log(`ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng... L·∫ßn th·ª≠ ${attempt}`);
                
                const order = await getOrderStatus(orderCode, token);
                console.log(`üéØ Attempt ${attempt} - Order received:`, order);
                console.log(`üéØ Order Status: "${order?.orderStatus}" (type: ${typeof order?.orderStatus})`);
                console.log(`üéØ Status check: Paid=${order?.orderStatus === 'Paid'}, Partial=${order?.orderStatus === 'Partial'}`);
                
                setOrderData(order); // C·∫≠p nh·∫≠t UI ngay c·∫£ khi ƒëang ch·ªù

                // ƒêi·ªÅu ki·ªán th√†nh c√¥ng: tr·∫°ng th√°i l√† 'Paid' ho·∫∑c 'Partial'
                if (order && (order.orderStatus === 'Paid' || order.orderStatus === 'Partial')) {
                    console.log('‚úÖ X√°c nh·∫≠n th√†nh c√¥ng! Tr·∫°ng th√°i:', order.orderStatus);
                    setIsConfirming(false);
                    setConfirmationComplete(true);
                    return; // Tho√°t kh·ªèi h√†m
                } else {
                    console.log(`‚ùå Attempt ${attempt} failed - Status: "${order?.orderStatus}", Order exists: ${!!order}`);
                }

                // N·∫øu ch∆∞a ph·∫£i l·∫ßn th·ª≠ cu·ªëi, ƒë·ª£i v√† th·ª≠ l·∫°i
                if (attempt < MAX_POLLING_ATTEMPTS) {
                    console.log(`‚è∞ Waiting ${POLLING_INTERVAL/1000}s before next attempt...`);
                    await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));
                }
            }

            // N·∫øu tho√°t kh·ªèi v√≤ng l·∫∑p m√† ch∆∞a return, nghƒ©a l√† ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠
            console.log('üí• All polling attempts failed - throwing timeout error');
            throw new Error('H·ªá th·ªëng ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n. Vui l√≤ng ki·ªÉm tra l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.');

        } catch (err: any) {
            console.error('‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω thanh to√°n:', err);
            console.error('‚ùå Error stack:', err.stack);
            console.error('‚ùå Error type:', typeof err);
            console.error('‚ùå Error message:', err.message);
            setError(err.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n v·ªõi h·ªá th·ªëng.');
        } finally {
            // D√π th√†nh c√¥ng hay th·∫•t b·∫°i, ƒë·ªÅu ph·∫£i k·∫øt th√∫c lu·ªìng x√°c nh·∫≠n
            console.log('üèÅ Payment confirmation process finished');
            setIsConfirming(false);
            setConfirmationComplete(true);
        }
    }, []);

    // **FIXED: useEffect ch√≠nh ƒë·ªÉ kh·ªüi ch·∫°y logic**
    useEffect(() => {
        if (hasInitiated || !searchParams || !session?.accessToken) {
            if (!session) setIsLoading(true);
            else setIsLoading(false);
            return;
        }
        setHasInitiated(true);

        const responseCode = searchParams.get('vnp_ResponseCode');
        const amount = searchParams.get('vnp_Amount');
        const orderInfo = searchParams.get('vnp_OrderInfo'); // orderCode
        const transactionNo = searchParams.get('vnp_TransactionNo'); // transactionId from VNPay

        console.log('VNPay callback params:', { responseCode, amount, orderInfo, transactionNo });

        const paymentResult = {
            success: responseCode === '00',
            amount: amount ? parseInt(amount) / 100 : 0,
            orderInfo,
            transactionNo,
        };
        setResult(paymentResult);

        if (paymentResult.success && orderInfo && transactionNo) {
            // Giao d·ªãch VNPay th√†nh c√¥ng ‚Üí B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√°c nh·∫≠n v·ªõi backend
            console.log('‚úÖ VNPay callback th√†nh c√¥ng, b·∫Øt ƒë·∫ßu x√°c nh·∫≠n v·ªõi backend...');
            handlePaymentConfirmation(orderInfo, transactionNo, session.accessToken);
        } else {
            // Giao d·ªãch t·∫°i VNPay th·∫•t b·∫°i ho·∫∑c thi·∫øu th√¥ng tin
            console.log('‚ùå VNPay callback th·∫•t b·∫°i ho·∫∑c thi·∫øu th√¥ng tin');
            const errorMsg = paymentResult.success 
                ? 'Thi·∫øu th√¥ng tin giao d·ªãch t·ª´ VNPay (orderInfo ho·∫∑c transactionNo)'
                : (searchParams.get('vnp_Message') || 'Giao d·ªãch t·∫°i c·ªïng VNPay ƒë√£ b·ªã h·ªßy ho·∫∑c th·∫•t b·∫°i.');
            setError(errorMsg);
            setConfirmationComplete(true); // Cho ph√©p chuy·ªÉn trang
        }

        setIsLoading(false);
    }, [searchParams, session, hasInitiated, handlePaymentConfirmation]);

    // useEffect cho countdown v√† chuy·ªÉn trang
    useEffect(() => {
        if (confirmationComplete) {
            const timer = setInterval(() => {
                setCountdown(prev => (prev <= 1 ? 0 : prev - 1));
            }, 1000);

            // T·ª± ƒë·ªông chuy·ªÉn trang khi countdown v·ªÅ 0
            if (countdown === 0) {
                clearInterval(timer);
                router.push('/staff/officesales');
            }

            return () => clearInterval(timer);
        }
    }, [confirmationComplete, countdown, router]);

    // C·∫£nh b√°o ng∆∞·ªùi d√πng kh√¥ng ƒë√≥ng tab khi ƒëang x√°c nh·∫≠n
    useEffect(() => {
        const handleBeforeUnload = (e: BeforeUnloadEvent) => {
            if (isConfirming) {
                e.preventDefault();
                e.returnValue = 'ƒêang x√°c nh·∫≠n thanh to√°n, vi·ªác ƒë√≥ng trang c√≥ th·ªÉ l√†m b·∫°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ cu·ªëi c√πng. Vui l√≤ng ch·ªù!';
            }
        };
        window.addEventListener('beforeunload', handleBeforeUnload);
        return () => window.removeEventListener('beforeunload', handleBeforeUnload);
    }, [isConfirming]);


    // ----- PH·∫¶N RENDER -----

    if (isLoading && !result) {
        return <div className="min-h-screen flex items-center justify-center"><p>ƒêang t·∫£i th√¥ng tin thanh to√°n...</p></div>;
    }

    if (!result) {
        return <div className="min-h-screen flex items-center justify-center"><p>Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n.</p></div>;
    }

    return (
        <div className="min-h-screen flex items-center justify-center py-12 px-4">
            <div className="max-w-2xl w-full space-y-8">
                <div className={`p-6 rounded-lg shadow-md ${result.success && !error ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
                    <div className="text-center mb-6">
                        {/* Icon th√†nh c√¥ng / th·∫•t b·∫°i */}
                        <div className="flex items-center justify-center mb-4">
                            {result.success && !error ? (
                                <svg className="w-16 h-16 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" /></svg>
                            ) : (
                                <svg className="w-16 h-16 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /></svg>
                            )}
                        </div>

                        {/* Ti√™u ƒë·ªÅ ch√≠nh */}
                        <h2 className={`text-3xl font-bold mb-2 ${result.success && !error ? 'text-green-800' : 'text-red-800'}`}>
                            {result.success && !error ? 'Thanh to√°n th√†nh c√¥ng' : 'Thanh to√°n th·∫•t b·∫°i'}
                        </h2>

                        {/* Tr·∫°ng th√°i x·ª≠ l√Ω & countdown */}
                        {isConfirming ? (
                            <p className="text-lg text-yellow-800 mb-6">ƒêang x√°c nh·∫≠n v·ªõi h·ªá th·ªëng, vui l√≤ng ch·ªù...</p>
                        ) : (
                            <p className="text-lg text-gray-600 mb-6">T·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng sau {countdown} gi√¢y</p>
                        )}
                    </div>

                    {/* Th√¥ng tin giao d·ªãch VNPay */}
                    <div className="bg-gray-50 rounded-lg p-4 mb-6">
                        <h3 className="text-lg font-semibold mb-4 text-gray-800">Th√¥ng tin giao d·ªãch</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                            <div className="flex justify-between">
                                <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                                <span className="font-medium">{result.orderInfo || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between">
                                <span className="text-gray-600">S·ªë giao d·ªãch:</span>
                                <span className="font-medium">{result.transactionNo || 'N/A'}</span>
                            </div>
                            <div className="flex justify-between">
                                <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                                <span className="font-medium">{result.amount?.toLocaleString('vi-VN')} VNƒê</span>
                            </div>
                            <div className="flex justify-between">
                                <span className="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                                <span className="font-medium">VNPay</span>
                            </div>
                        </div>
                    </div>

                    {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
                    {error && (
                        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                            <p className="font-bold">ƒê√£ x·∫£y ra l·ªói</p>
                            <p>{error}</p>
                        </div>
                    )}

                    {/* Th√¥ng tin ƒë∆°n h√†ng (hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi nh·∫•t) */}
                    {orderData && (
                        <div className="bg-white rounded-lg p-4 mb-6 border">
                            <h3 className="text-lg font-semibold mb-4 text-gray-800">Th√¥ng tin ƒë∆°n h√†ng c·∫≠p nh·∫≠t</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-4">
                                <div className="flex justify-between">
                                    <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                                    <span className="font-medium">{orderData.orderCode}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Kh√°ch h√†ng:</span>
                                    <span className="font-medium">{orderData.customerName || 'Kh√°ch l·∫ª'}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">S·ªë ƒëi·ªán tho·∫°i:</span>
                                    <span className="font-medium">{orderData.phoneNumber || 'N/A'}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">T·ªïng ti·ªÅn:</span>
                                    <span className="font-medium">{orderData.finalAmount?.toLocaleString('vi-VN')} VNƒê</span>
                                </div>
                            </div>
                            
                            {/* Tr·∫°ng th√°i ƒë∆°n h√†ng */}
                            <div className="flex justify-between items-center mb-4">
                                <span className="text-gray-600">Tr·∫°ng th√°i ƒë∆°n h√†ng:</span>
                                <span className={`font-medium px-3 py-1 rounded-full text-sm ${
                                    orderData.orderStatus === 'Paid' ? 'bg-green-100 text-green-800' :
                                        orderData.orderStatus === 'Partial' ? 'bg-yellow-100 text-yellow-800' :
                                            'bg-gray-100 text-gray-800'
                                }`}>
                                    {
                                        orderData.orderStatus === 'Paid' ? 'ƒê√£ thanh to√°n' :
                                            orderData.orderStatus === 'Partial' ? 'Thanh to√°n m·ªôt ph·∫ßn' :
                                                orderData.orderStatus === 'Pending' ? 'Ch·ªù thanh to√°n' : orderData.orderStatus
                                    }
                                </span>
                            </div>

                            {/* Th√¥ng tin thanh to√°n */}
                            {orderData.payments && orderData.payments.length > 0 && (
                                <div className="border-t pt-4">
                                    <h4 className="font-medium text-gray-800 mb-3">Chi ti·∫øt thanh to√°n:</h4>
                                    <div className="space-y-2">
                                        {orderData.payments.map((payment, index) => (
                                            <div key={payment.paymentId || index} className="flex justify-between items-center text-sm">
                                                <div className="flex items-center space-x-2">
                                                    <span className="text-gray-600">{payment.paymentMethod}:</span>
                                                    <span className={`px-2 py-1 rounded text-xs ${
                                                        payment.paymentStatus === 'COMPLETED' ? 'bg-green-100 text-green-700' :
                                                            payment.paymentStatus === 'PENDING' ? 'bg-yellow-100 text-yellow-700' :
                                                                'bg-gray-100 text-gray-700'
                                                    }`}>
                                                        {payment.paymentStatus === 'COMPLETED' ? 'Ho√†n th√†nh' :
                                                         payment.paymentStatus === 'PENDING' ? 'Ch·ªù x·ª≠ l√Ω' : payment.paymentStatus}
                                                    </span>
                                                </div>
                                                <span className="font-medium">{payment.amount?.toLocaleString('vi-VN')} VNƒê</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* N√∫t b·∫•m */}
                    <div className="flex items-center justify-center">
                        <button
                            onClick={() => router.push('/staff/officesales')}
                            className="px-8 py-3 rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400"
                            disabled={isConfirming} // V√¥ hi·ªáu h√≥a khi ƒëang x√°c nh·∫≠n
                        >
                            {isConfirming ? 'ƒêang x·ª≠ l√Ω...' : `Quay v·ªÅ ngay (${countdown}s)`}
                        </button>
                    </div>

                </div>
            </div>
        </div>
    );
}